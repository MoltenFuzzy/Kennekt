// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth(providers)
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String?
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String    @id @default(cuid())
    username         String?   @unique
    firstName        String?
    lastName         String?
    name             String?
    password         String?
    email            String?   @unique
    emailVerified    DateTime?
    image            String?
    role             Role      @default(USER)
    accounts         Account[]
    posts            Post[]
    images           Image[]
    comments         Comment[]
    sessions         Session[]
    // many to many
    likedPosts       Post[]    @relation("likedPosts")
    dislikedPosts    Post[]    @relation("dislikedPosts")
    likedComments    Comment[] @relation("likedComments")
    dislikedComments Comment[] @relation("dislikedComments")
    createdAt        DateTime  @default(now())
    // many to many
    followers        User[]    @relation("follower")
    followings       User[]    @relation("following")
    follower         User?     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
    followerId       String?
    following        User?     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
    followingId      String?
}

// model Follows {
//     follower    User   @relation("follower", fields: [followerId], references: [id])
//     followerId  String
//     following   User   @relation("following", fields: [followingId], references: [id])
//     followingId String

//     @@id([followerId, followingId])
// }

model Post {
    id            String    @id @default(cuid())
    title         String    @db.VarChar(255)
    body          String?   @db.Text
    images        Image[]
    likesCount    Int       @default(0)
    dislikesCount Int       @default(0)
    // many to many - many users can like many posts?
    likedBy       User[]    @relation("likedPosts")
    dislikedBy    User[]    @relation("dislikedPosts")
    authorId      String
    author        User      @relation(fields: [authorId], references: [id])
    commentsCount Int       @default(0)
    comments      Comment[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model Image {
    id        String   @id @default(cuid())
    // image urls are not stored in the database because presigned urls expire, 
    // instead we fetch the image from s3 and assign it when the api endpoint is called
    url       String?
    filename  String?
    mimetype  String?
    encoding  String?
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    // post is optional because it can be a profile image
    postId    String?
    post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// TODO: https://stackoverflow.com/questions/70095411/i-want-to-use-prisma-to-store-nested-comments-like-on-reddit-how-can-i-retrie
model Comment {
    id              String    @id @default(cuid())
    content         String    @db.Text
    published       Boolean   @default(false)
    authorId        String
    author          User      @relation(fields: [authorId], references: [id])
    postId          String
    post            Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
    likesCount      Int       @default(0)
    likedBy         User[]    @relation("likedComments")
    dislikesCount   Int       @default(0)
    dislikedBy      User[]    @relation("dislikedComments")
    repliesCount    Int       @default(0)
    replies         Comment[] @relation("replies")
    parentCommentId String?
    parentComment   Comment?  @relation("replies", fields: [parentCommentId], references: [id])
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Role {
    USER
    ADMIN
}
